This patch implements the `expect_a=` option for the resolver.

The expect_a option turns the whole answer to NXDOMAIN if the specific A record
is not included in the response. Otherwise, all A records are removed, keeping
only the AAAA records.

--- a/src/core/ngx_resolver.c
+++ b/src/core/ngx_resolver.c
@@ -260,6 +260,15 @@
 
             continue;
         }
+
+        if (ngx_strncmp(names[i].data, "expect_a=", 9) == 0) {
+            s.len = names[i].len - 9;
+            s.data = names[i].data + 9;
+
+            r->expect_a = ngx_inet_addr(s.data, s.len);
+
+            continue;
+        }
 #endif
 
         ngx_memzero(&u, sizeof(ngx_url_t));
@@ -292,6 +301,12 @@
         }
     }
 
+    if (r->expect_a) {
+        // both address families need to be fetched for expect_a
+        r->ipv4 = 1;
+        r->ipv6 = 1;
+    }
+
 #if (NGX_HAVE_INET6)
     if (r->ipv4 + r->ipv6 == 0) {
         ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
@@ -2098,6 +2113,7 @@
         }
 #endif
 
+nxdomain:
         code = NGX_RESOLVE_NXDOMAIN;
     }
 
@@ -2429,6 +2445,24 @@
 #if (NGX_HAVE_INET6)
         naddrs += rn->naddrs6;
 #endif
+        if (r->expect_a) {
+            naddrs = (rn->naddrs6 == (u_short) -1) ? 0 : rn->naddrs6;
+            if (!naddrs || rn->naddrs == (u_short) -1 || !rn->naddrs) {
+                goto nxdomain;
+            } else if (rn->naddrs == 1) {
+                if (rn->u.addr != r->expect_a) {
+                    goto nxdomain;
+                }
+            } else {
+                i = 0;
+                while (rn->u.addrs[i++] != r->expect_a) {
+                    if (i == rn->naddrs) {
+                        goto nxdomain;
+                    }
+                }
+            }
+            rn->naddrs = 0;
+        }
 
         if (naddrs == 1 && rn->naddrs == 1) {
             addrs = NULL;
--- a/src/core/ngx_resolver.h
+++ b/src/core/ngx_resolver.h
@@ -190,6 +190,8 @@
     time_t                    expire;
     time_t                    valid;
 
+    in_addr_t                 expect_a;
+
     ngx_uint_t                log_level;
 };
 
